{"version":3,"sources":["data/index.js","components/Step/Step.js","components/StepNavigation/StepNavigation.js","components/Wizard/Wizard.js","serviceWorker.js","index.js"],"names":["titles","auto","brand","models","transmissionTypes","fuelTypes","Step","props","_props$state","state","model","transmission","fuel","step","react_default","a","createElement","className","Fragment","map","item","index","key","value","onClick","onChooseBrand","modelItem","onChooseModel","transmissionItem","onChooseTransmission","fuelItem","onChooseFuel","StepNavigation","isBtnNavDisabled","isBackBtn","onPrevStepNavigationHandler","disabled","onNextStepNavigationHandler","Wizard","chooseBrand","e","_this","setState","target","chooseModel","chooseTransmission","chooseFuel","prevStepNavigationHandler","nextStepNavigationHandler","_this2","this","indexOf","components_Step_Step","components_StepNavigation_StepNavigation","Component","Boolean","window","location","hostname","match","ReactDOM","render","components_Wizard_Wizard","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2255a03a.chunk.js","sourcesContent":["export const titles = [\n  'Choose car brand',\n  'Choose car model',\n  'Choose transmission type',\n  'Choose fuel type',\n  'Your choice'\n];\n\nexport const auto = [\n  {\n    brand: 'Volkswagen',\n    models: ['Polo', 'Golf', 'Scirocco', 'Beetle'],\n  },\n  {\n    brand: 'Peugeot',\n    models: ['206', '406', '407', '408'],\n  },\n  {\n    brand: 'Subaru',\n    models: ['Impreza', 'Legacy', 'Ascent', 'Forester'],\n  },\n  {\n    brand: 'Lada',\n    models: ['Kalina', 'Priora', 'Vesta', 'Granta'],\n  }\n];\n\nexport const transmissionTypes = [\n  'auto',\n  'manual',\n  'hybrid',\n  'robotic',\n];\n\nexport const fuelTypes = [\n  'petrol',\n  'diesel',\n  'gas',\n  'electric'\n];\n","import React from 'react';\nimport { titles, auto, transmissionTypes, fuelTypes } from '../../data';\n\nconst Step = (props) => {\n  const { brand, model, transmission, fuel, step } = props.state;\n\n  const showCarBrandStep = () => {\n    return (\n      <React.Fragment>\n        { auto.map((item, index) =>\n            <button\n              key = { index }\n              className = { brand === item.brand ? 'option selected' : 'option' }\n              value = { item.brand }\n              onClick = { props.onChooseBrand }\n            >\n              { item.brand }\n            </button>\n          ) \n        }\n      </React.Fragment>\n    )\n  }\n\n  const showCarModelStep = () => {\n    return auto.map((item, index) => {\n      if (brand === item.brand) {\n        return (\n          <React.Fragment key={ index }>\n            { auto[index].models.map((modelItem, index) =>\n                <button\n                  key = { index }\n                  className = { model === modelItem ? 'option selected' : 'option' }\n                  value = { modelItem }\n                  onClick = { props.onChooseModel }\n                >\n                  { modelItem }\n                </button>\n              ) \n            }\n          </React.Fragment>\n        )\n      }\n\n      return null;\n    })\n  }\n\n  const showTransmissionStep = () => {\n    return (\n      <React.Fragment>\n        { transmissionTypes.map((transmissionItem, index) =>\n            <button\n              key = { index }\n              className = { transmission === transmissionItem ? 'option selected' : 'option' }\n              value = { transmissionItem }\n              onClick = { props.onChooseTransmission }\n            >\n              { transmissionItem }\n            </button>\n          ) \n        }\n      </React.Fragment>\n    )\n  }\n\n  const showFuelStep = () => {\n    return (\n      <React.Fragment>\n        { fuelTypes.map((fuelItem, index) =>\n            <button\n              key = { index }\n              className = { fuel === fuelItem ? 'option selected' : 'option' }\n              value = { fuelItem }\n              onClick = { props.onChooseFuel }\n            >\n              { fuelItem }\n            </button>\n          ) \n        }\n      </React.Fragment>\n    )\n  }\n\n  const showResult = () => {\n    return (\n      <div className=\"result\">\n        <p><span>Brand: </span>{ brand }</p>\n        <p><span>Model: </span>{ model }</p>\n        <p><span>Transmission type: </span>{ transmission }</p>\n        <p><span>Fuel type: </span>{ fuel }</p>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"options\">\n      <h4 className=\"title\">{ titles[step] }</h4>\n      { step === 0 && showCarBrandStep() }\n      { step === 1 && showCarModelStep() }\n      { step === 2 && showTransmissionStep() }\n      { step === 3 && showFuelStep() }\n      { step === 4 && showResult() }\n    </div>\n  )\n}\n\nexport default Step;","import React from 'react';\n\nconst StepNavigation = (props) => {\n  const { brand, model, transmission, fuel, step } = props.state;\n\n  const isBtnNavDisabled = isBackBtn => {\n    if (isBackBtn) {\n      return step === 0;\n    } \n\n    return (step === 0 && brand === '') ||\n    (step === 1 && model === '') || \n    (step === 2 && transmission === '') || \n    (step === 3 && fuel === '') || \n    (step === 4 && brand !== '' && model !== '' && transmission !== '' && fuel !== '');\n  }\n\n  return (\n    <div className=\"controls\">\n      {\n        <button className=\"btn-nav\" \n                onClick = { props.onPrevStepNavigationHandler }\n                disabled = { isBtnNavDisabled(true) }>\n          Back\n        </button> \n      }\n      {\n        <button className=\"btn-nav\" \n                onClick = { props.onNextStepNavigationHandler } \n                disabled = { isBtnNavDisabled(false) }>\n          Next\n        </button> \n      }\n    </div>\n  )\n}\n\nexport default StepNavigation;","import React, { Component } from 'react';\nimport Step from '../Step';\nimport StepNavigation from '../StepNavigation';\nimport { titles } from '../../data';\n\nclass Wizard extends Component {\n  state = {\n    brand: '',\n    model: '',\n    transmission: '',\n    fuel: '',\n    step: 0,\n  }\n\n  chooseBrand = e => {\n    this.setState({ brand: e.target.value });\n  }\n\n  chooseModel = e => {\n    this.setState({ model: e.target.value });\n  }\n\n  chooseTransmission = e => {\n    this.setState({ transmission: e.target.value });\n  }\n\n  chooseFuel = e => {\n    this.setState({ fuel: e.target.value });\n  }\n\n  prevStepNavigationHandler = () => {\n    if (this.state.step === 1) {\n      this.setState({ model : '' });\n    }\n\n    this.setState({ step: this.state.step - 1 });\n  }\n\n  nextStepNavigationHandler = () => {\n    this.setState({ step: this.state.step + 1 });\n  }\n\n  render() {\n    const { step } = this.state;\n\n    return (\n      <div className=\"wrapper\">\n        <div className=\"wizard\">\n          { titles.map((item, index) => step === titles.indexOf(item) &&\n              <Step\n                key = { index }\n                item = { item }\n                state = { this.state }\n                onChooseBrand = { this.chooseBrand }\n                onChooseModel = { this.chooseModel }\n                onChooseTransmission = { this.chooseTransmission }\n                onChooseFuel = { this.chooseFuel }\n              />\n            )\n          }\n          <StepNavigation\n            state = { this.state }\n            onPrevStepNavigationHandler = { this.prevStepNavigationHandler }\n            onNextStepNavigationHandler = { this.nextStepNavigationHandler }\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Wizard;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Wizard from './components/Wizard/Wizard';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Wizard />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}